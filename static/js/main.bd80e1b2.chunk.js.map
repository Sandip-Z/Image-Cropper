{"version":3,"sources":["components/Common/Input.js","components/Canvas/index.js","components/Upload/index.js","App.js","serviceWorker.js","index.js"],"names":["Input","onChange","placeholder","value","props","Canvas","image","getCroppedImageBlob","dimension","useState","startDraw","setStartDraw","undefined","myCanvas","useRef","ctx","setCtx","canvasHeight","setCanvasHeight","canvasWidth","setCanvasWidth","x","setX","y","setY","sx","setSx","sy","setSy","crop","setCrop","setShowCropButton","useEffect","height","width","context","current","getContext","style","background","backgroundRepeat","backgroundSize","clearRect","borderStyle","beginPath","rect","stroke","img","Image","onload","e","preventDefault","setAttribute","drawImage","toBlob","blob","src","ref","id","onMouseDown","target","getBoundingClientRect","x0","clientX","left","y0","clientY","top","onMouseUp","onMouseMove","x1","maxHeight","maxWidth","onClick","Upload","file","setFile","fileName","setFileName","setCroppedImg","croppedImgUrl","setCroppedImgUrl","alt","setAlt","title","setTitle","fileUrl","setFileUrl","imgDimension","setImgDimension","imageUploadRef","blobToImage","URL","createObjectURL","objectUrl","name","marginTop","croppedUrl","display","justifyContent","className","onSubmit","type","event","files","marginBottom","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bd80e1b2.chunk.js","sourcesContent":["import React from 'react'\n\nconst Input = ({onChange, placeholder, value, ...props}) => {\n    return <input \n        onChange={onChange}\n        placeholder={placeholder}\n        value={value}\n        {...props}\n    />\n}\n\nexport default Input","import React, { useEffect, useRef, useState } from 'react'\n// import image from '../../assests/image/image.png'\n\nconst Canvas = ({image, getCroppedImageBlob, dimension}) => {\n\n    const [startDraw, setStartDraw] = useState(false)\n    const [croppedImg, setCroppedImg] = useState(undefined)\n    const myCanvas = useRef();\n    const [ctx, setCtx] = useState()\n    const [canvasHeight, setCanvasHeight] = useState(750)\n    const [canvasWidth, setCanvasWidth] = useState(750)\n    const [x, setX] = useState(0)\n    const [y, setY] = useState(0)\n    const [sx, setSx] = useState(50)\n    const [sy, setSy] = useState(50)\n    const [crop, setCrop] = useState(false);\n    const [showCropButton, setShowCropButton] = useState(false)\n\n\n    useEffect(() => {\n        if(dimension && dimension.height && dimension.width){\n            setCanvasHeight(dimension.height);\n            setCanvasWidth(dimension.width);\n        }\n    }, [dimension])\n\n    useEffect(() => {\n        const context = myCanvas.current.getContext('2d')\n        setCtx(context)\n    }, [myCanvas])\n\n    useEffect(() => { \n        myCanvas.current.style.background = `url('${image}')`\n        myCanvas.current.style.backgroundRepeat = 'no-repeat'\n        myCanvas.current.style.backgroundSize = 'cover'\n        // myCanvas.current.style.maxHeight = '100%',\n        // myCanvas.current.style.maxWidth = '100%'\n        setCrop(false);\n    }, [image])\n\n    useEffect(() => {\n        if(ctx){\n            ctx.clearRect(0,0,canvasWidth, canvasHeight)\n            ctx.borderStyle = '1px solid blue'\n            ctx.beginPath()\n            ctx.rect(x,y,sx,sy)\n            ctx.stroke()\n        }\n    }, [x, y, sx, sy])\n\n    useEffect(() => {\n        if(ctx){\n            if(image && sx && sy){\n                const img = new Image()\n                img.onload = function(e){\n                    e.preventDefault()\n                    setCanvasWidth(sx)\n                    setCanvasHeight(sy)\n                    myCanvas.current.setAttribute('style', null)\n                    ctx.drawImage(img,x,y,sx,sy,0,0,sx,sy)\n                    myCanvas.current.toBlob(blob => {getCroppedImageBlob(blob)}, 'image/jpeg',0.82)\n                }\n                img.src = image\n            }\n        }\n    }, [crop])\n\n    const handleMouseDown = e => {\n        e.preventDefault()\n        const rect = e.target.getBoundingClientRect();\n        const x0 = e.clientX - rect.left; //x position within the element.\n        const y0 = e.clientY - rect.top;\n        setX(x0)\n        setY(y0)\n        setStartDraw(true)\n    }\n\n    const handleMouseUp = e => {\n        e.preventDefault()\n        setStartDraw(false)\n        setShowCropButton(true);\n        // console.log({x,y,sx,sy})\n    }\n\n    const setCropOn = () => {\n        setCrop(true)\n    }\n\n    const handleMouseMove = e => {\n        e.preventDefault()\n        if(startDraw){\n            const rect = e.target.getBoundingClientRect();\n            const x1 = e.clientX - rect.left;\n            const y2 = e.clientY - rect.top;\n            const length = x1 - x\n            const height = y2 - y\n            setSx(length)\n            setSy(height);\n        }\n    }\n\n\n    return (\n        <>\n        <canvas \n            ref={myCanvas} \n            id=\"myCanvas\" \n            width={canvasWidth} \n            height={canvasHeight} \n            onMouseDown={handleMouseDown} \n            onMouseUp={handleMouseUp} \n            onMouseMove={handleMouseMove}\n            style={\n                {\n                    background : `url('${image}')`, \n                    backgroundRepeat : 'no-repeat', \n                    backgroundSize:'cover',\n                    maxHeight : '100%',\n                    maxWidth : '100%'\n                }\n            }\n        >\n\n        </canvas>\n        <button onClick={setCropOn}>Crop</button>\n        </>\n    )\n}\n\nexport default Canvas","import React, {useState, useEffect, useRef} from 'react'\nimport Input from '../Common/Input'\nimport Canvas from '../Canvas'\n\nconst Upload = () => {\n\n    const [file, setFile] = useState()\n    const [fileName, setFileName] = useState()\n    const [croppedImg, setCroppedImg] = useState();\n    const [croppedImgUrl, setCroppedImgUrl] = useState();\n    const [alt, setAlt] = useState()\n    const [title, setTitle] = useState()\n    const [fileUrl, setFileUrl] = useState()\n    const [imgDimension, setImgDimension] = useState()\n    const imageUploadRef = useRef()\n\n    const handleImageChange = event => {\n        setFile(event.target.files[0])\n    }\n\n    const handleClearImage = () => {\n        setFile()\n        setFileUrl()\n        setCroppedImgUrl(undefined)\n        if(imageUploadRef.current){\n            imageUploadRef.current.value = null\n        }\n    }\n\n    const handleCroppedImage = blob => {\n        setCroppedImg(blob)\n        const croppedUrl = blobToImage(blob);\n        setCroppedImgUrl(croppedUrl);\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()\n    }\n\n    const blobToImage = blob => {\n        if(blob){\n            const objectUrl = URL.createObjectURL(blob);\n            return objectUrl\n        }\n    }\n\n\n    useEffect(() => {\n        if(file){\n            const objectUrl = blobToImage(file)\n            setFileUrl(objectUrl)\n            setFileName(file.name)\n            const img = new Image();\n            img.onload = function(){\n                setImgDimension({width : img.width, height : img.height})\n            }\n            img.src = objectUrl\n        }\n    }, [file])\n\n    return (\n        <>\n            <div style={{marginTop : 25}}>\n                {\n                    fileUrl ? <>\n                        <h1>{fileName}</h1>\n                        <Canvas \n                            image={croppedImgUrl || fileUrl} \n                            getCroppedImageBlob={handleCroppedImage} \n                            dimension={imgDimension}\n                        />\n                        <button onClick={handleClearImage}>Clear Image</button>\n                    </> : <div style={{display : 'flex',justifyContent : 'center'}} className='upload-form-wrapper'>\n                            <form onSubmit={handleSubmit}>\n                                <Input type=\"file\" onChange={handleImageChange} ref={imageUploadRef}/>\n                            </form>\n                            </div>\n                }\n            </div>\n            {\n                fileUrl ? <div style={{marginTop : 25, marginBottom : 25}}>\n                    <Input \n                        onChange = {e => {\n                            setFileName(e.target.value)\n                        }} \n                        placeholder=\"Filename\" \n                        value={fileName} \n                    />\n                    <Input \n                        onChange = {e => setAlt(e.target.value)} \n                        placeholder=\"Alt for image\" \n                        value={alt} \n                    />\n                    <Input \n                        onChange= {e => setTitle(e.target.value)} \n                        placeholder=\"Title\" \n                        value={title} \n                    />\n                </div> : <></>\n            }\n            <div style={{display : 'none'}}>\n                {\n                    croppedImgUrl && <img src={croppedImgUrl} />\n                }\n            </div>\n        </>\n    )\n}\n\nexport default Upload","import React from 'react';\nimport Upload from './components/Upload'\nimport Canvas from './components/Canvas'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Upload />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}